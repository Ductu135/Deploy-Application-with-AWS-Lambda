org: tuducbui135
app: serverless-todo-app
service: serverless-todo-app

plugins:
  - serverless-iam-roles-per-function

frameworkVersion: '3'

package:
  individually: true

#Node modules
provider:
  name: aws
  runtime: nodejs20.x

  stage: ${opt:stage, 'dev'}
  region: 'us-east-1'

  environment:
    TODOS_TABLE: serverless-todo-app-${self:provider.stage}
    TODOS_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: serverless-todo-app-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    PROJECT_NAME: serverless-todo-app
    INDEX_NAME: ${self:provider.environment.TODOS_CREATED_AT_INDEX}

  tracing:
    lambda: true
    apiGateway: true
    
  logs:
   # Enable API Gateway logs
    restApi: true
  
  iam:
    role:
      statements:
        - Effect: Allow
          Action: 
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
          Resource: "*"

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true

  # TODO: Configure this function
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/create-todo-model.json)}

  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true

  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true

resources:
  Resources:
    # TODO: Add any necessary AWS resources
    # TODO: Fill the properties
    # Feel free to change the names as you like.
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:

    # TODO: Create a DynamoDB table with local secondary index and a composite key
    ArticlesTable:
      Type: AWS::DynamoDB::Table
      Properties:

    # TODO: Complete the bucket properties below.
    # Do not forget to add the CorsConfiguration propoerty
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:

    # TODO: Complete the policy below and attach it to the bucket defined above
    # For cross referencing the name of the bucket, use "!Ref AttachmentsBucket"
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties: